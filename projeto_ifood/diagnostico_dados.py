#!/usr/bin/env python3
"""
Script de diagn√≥stico para identificar problemas nos dados do iFood
"""

import pandas as pd
import numpy as np
import os

def diagnosticar_arquivo(caminho_arquivo, nome_arquivo):
    """
    Diagnostica um arquivo espec√≠fico
    """
    print(f"\n{'='*60}")
    print(f"DIAGN√ìSTICO: {nome_arquivo}")
    print(f"{'='*60}")
    
    if not os.path.exists(caminho_arquivo):
        print(f"‚ùå ERRO: Arquivo n√£o encontrado: {caminho_arquivo}")
        return None
    
    try:
        # Tentar carregar o arquivo
        if caminho_arquivo.endswith('.xlsx'):
            df = pd.read_excel(caminho_arquivo)
        else:
            df = pd.read_csv(caminho_arquivo)
        
        print(f"‚úÖ Arquivo carregado com sucesso!")
        print(f"üìä Dimens√µes: {df.shape[0]} linhas x {df.shape[1]} colunas")
        
        # Informa√ß√µes b√°sicas
        print(f"\nüìã COLUNAS ENCONTRADAS:")
        for i, col in enumerate(df.columns, 1):
            tipo = df[col].dtype
            nulos = df[col].isnull().sum()
            unicos = df[col].nunique()
            print(f"  {i:2d}. {col:<30} | Tipo: {tipo:<10} | Nulos: {nulos:3d} | √önicos: {unicos}")
        
        # Verificar valores nulos
        print(f"\nüîç AN√ÅLISE DE VALORES NULOS:")
        total_nulos = df.isnull().sum().sum()
        if total_nulos > 0:
            print(f"  Total de valores nulos: {total_nulos}")
            colunas_com_nulos = df.isnull().sum()[df.isnull().sum() > 0]
            for col, nulos in colunas_com_nulos.items():
                percentual = (nulos / len(df)) * 100
                print(f"    {col}: {nulos} nulos ({percentual:.1f}%)")
        else:
            print("  ‚úÖ Nenhum valor nulo encontrado!")
        
        # Primeiras linhas
        print(f"\nüìù PRIMEIRAS 3 LINHAS:")
        for i, row in df.head(3).iterrows():
            print(f"  Linha {i+1}:")
            for col in df.columns:
                valor = row[col]
                if pd.isna(valor):
                    valor_str = "NaN"
                elif isinstance(valor, str):
                    valor_str = f'"{valor}"'
                else:
                    valor_str = str(valor)
                print(f"    {col}: {valor_str}")
            print()
        
        return df
        
    except Exception as e:
        print(f"‚ùå ERRO ao carregar arquivo: {e}")
        return None

def diagnosticar_dados_numericos(df, nome_dataset, colunas_criticas):
    """
    Diagn√≥stica especificamente colunas num√©ricas cr√≠ticas
    """
    print(f"\nüî¢ AN√ÅLISE NUM√âRICA - {nome_dataset}")
    print(f"{'-'*40}")
    
    for col in colunas_criticas:
        if col not in df.columns:
            print(f"  ‚ùå Coluna '{col}' n√£o encontrada!")
            continue
            
        print(f"\n  üìä Coluna: {col}")
        serie = df[col]
        
        # Tipo atual
        print(f"    Tipo atual: {serie.dtype}")
        
        # Valores √∫nicos (primeiros 10)
        valores_unicos = serie.unique()[:10]
        print(f"    Valores √∫nicos (amostra): {valores_unicos}")
        
        # Tentar convers√£o num√©rica
        try:
            # Converter para string primeiro
            serie_str = serie.astype(str)
            # Limpar caracteres n√£o num√©ricos
            serie_limpa = serie_str.str.replace(r'[^\d.,]', '', regex=True)
            serie_limpa = serie_limpa.str.replace(',', '.')
            # Tentar converter para num√©rico
            serie_numerica = pd.to_numeric(serie_limpa, errors='coerce')
            
            nulos_original = serie.isnull().sum()
            nulos_apos_conversao = serie_numerica.isnull().sum()
            perdas = nulos_apos_conversao - nulos_original
            
            print(f"    Nulos originais: {nulos_original}")
            print(f"    Nulos ap√≥s convers√£o: {nulos_apos_conversao}")
            if perdas > 0:
                print(f"    ‚ö†Ô∏è  PERDAS na convers√£o: {perdas} registros")
                
                # Mostrar valores que causaram problemas
                print(f"    Valores problem√°ticos:")
                problematicos = serie[serie_numerica.isnull() & serie.notnull()]
                for idx, valor in problematicos.head(5).items():
                    print(f"      Linha {idx}: '{valor}'")
            else:
                print(f"    ‚úÖ Convers√£o num√©rica bem-sucedida!")
                
            # Estat√≠sticas dos valores v√°lidos
            if nulos_apos_conversao < len(serie):
                valores_validos = serie_numerica.dropna()
                print(f"    Estat√≠sticas dos valores v√°lidos:")
                print(f"      Min: {valores_validos.min():.2f}")
                print(f"      Max: {valores_validos.max():.2f}")
                print(f"      M√©dia: {valores_validos.mean():.2f}")
                
        except Exception as e:
            print(f"    ‚ùå Erro na an√°lise num√©rica: {e}")

def diagnostico_completo():
    """
    Executa diagn√≥stico completo de todos os arquivos
    """
    print("üîç DIAGN√ìSTICO COMPLETO DOS DADOS IFOOD")
    print("="*60)
    
    # Definir arquivos e suas caracter√≠sticas
    arquivos_para_analisar = [
        {
            'caminho': 'restaurantes.csv',
            'nome': 'RESTAURANTES',
            'colunas_criticas': ['N√∫mero', 'CEP']
        },
        {
            'caminho': 'entregadores.csv',
            'nome': 'ENTREGADORES',
            'colunas_criticas': ['Capacidade M√°xima', 'Velocidade M√©dia (km/h)', 'Custo Operacional (R$/h)', 'Disponibilidade (h/dia)']
        },
        {
            'caminho': 'pedidos.csv',
            'nome': 'PEDIDOS',
            'colunas_criticas': ['valor_pedido', 'tempo_preparo_min', 'tempo_deslocamento_min', 'distancia_km']
        }
    ]
    
    datasets = {}
    
    # Analisar cada arquivo
    for arquivo_info in arquivos_para_analisar:
        df = diagnosticar_arquivo(arquivo_info['caminho'], arquivo_info['nome'])
        if df is not None:
            datasets[arquivo_info['nome']] = df
            diagnosticar_dados_numericos(df, arquivo_info['nome'], arquivo_info['colunas_criticas'])
    
    # Resumo final
    print(f"\n{'='*60}")
    print("üìã RESUMO DO DIAGN√ìSTICO")
    print(f"{'='*60}")
    
    problemas_encontrados = []
    
    for arquivo_info in arquivos_para_analisar:
        nome = arquivo_info['nome']
        if nome in datasets:
            df = datasets[nome]
            print(f"\n‚úÖ {nome}:")
            print(f"  üìä {df.shape[0]} registros, {df.shape[1]} colunas")
            
            # Verificar problemas espec√≠ficos
            if nome == 'PEDIDOS':
                # An√°lise espec√≠fica dos pedidos
                colunas_criticas = ['tempo_deslocamento_min', 'distancia_km', 'tempo_preparo_min']
                registros_validos = len(df)
                
                for col in colunas_criticas:
                    if col in df.columns:
                        # Simular limpeza
                        serie_limpa = pd.to_numeric(
                            df[col].astype(str).str.replace(r'[^\d.,]', '', regex=True).str.replace(',', '.'),
                            errors='coerce'
                        )
                        nulos = serie_limpa.isnull().sum()
                        if nulos > 0:
                            registros_validos = min(registros_validos, len(df) - nulos)
                
                if registros_validos == 0:
                    problemas_encontrados.append(f"‚ùå {nome}: Todos os registros seriam removidos na limpeza!")
                elif registros_validos < len(df):
                    problemas_encontrados.append(f"‚ö†Ô∏è  {nome}: {len(df) - registros_validos} registros seriam perdidos")
                else:
                    print(f"  ‚úÖ Todos os registros passariam na limpeza")
            
            elif nome == 'ENTREGADORES':
                # An√°lise espec√≠fica dos entregadores
                colunas_criticas = ['Velocidade M√©dia (km/h)', 'Custo Operacional (R$/h)']
                temp_df = df.copy()
                
                for col in colunas_criticas:
                    if col in temp_df.columns:
                        temp_df[col] = pd.to_numeric(
                            temp_df[col].astype(str).str.replace(',', '.'),
                            errors='coerce'
                        )
                
                registros_validos = len(temp_df.dropna(subset=[col for col in colunas_criticas if col in temp_df.columns]))
                
                if registros_validos < len(df):
                    problemas_encontrados.append(f"‚ö†Ô∏è  {nome}: {len(df) - registros_validos} registros seriam perdidos")
                else:
                    print(f"  ‚úÖ Todos os registros passariam na limpeza")
        else:
            problemas_encontrados.append(f"‚ùå {nome}: Arquivo n√£o p√¥de ser carregado")
    
    # Mostrar problemas encontrados
    if problemas_encontrados:
        print(f"\nüö® PROBLEMAS IDENTIFICADOS:")
        for problema in problemas_encontrados:
            print(f"  {problema}")
        
        print(f"\nüí° SUGEST√ïES PARA CORRE√á√ÉO:")
        print(f"  1. Verifique se os arquivos de dados est√£o no formato correto")
        print(f"  2. Confirme se os dados num√©ricos usam v√≠rgula ou ponto decimal")
        print(f"  3. Verifique se h√° caracteres especiais nos campos num√©ricos")
        print(f"  4. Considere usar dados de exemplo se os originais est√£o corrompidos")
    else:
        print(f"\nüéâ NENHUM PROBLEMA GRAVE IDENTIFICADO!")
        print(f"  Os dados parecem estar em bom estado para processamento.")
    
    print(f"\nüìÅ Para resolver problemas, voc√™ pode:")
    print(f"  1. Executar: python diagnostico_dados.py")
    print(f"  2. Corrigir os arquivos manualmente")
    print(f"  3. Usar o modo de dados de exemplo: python ifood_optimizer.py --exemplo")

if __name__ == "__main__":
    diagnostico_completo()